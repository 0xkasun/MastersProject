/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lankaocr.formwindows;

import com.lankaocr.actions.OcrActions;
import com.sun.media.jai.codec.ByteArraySeekableStream;
import com.sun.media.jai.codec.ImageCodec;
import com.sun.media.jai.codec.ImageDecoder;
import com.sun.media.jai.codec.SeekableStream;

import javax.media.jai.PlanarImage;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.image.RenderedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.StandardCharsets;

import org.apache.log4j.PropertyConfigurator;

/**
 * @author kasun
 */
public class StartWindow extends javax.swing.JFrame {

    /**
     * Creates new form StartWindow
     */
    public StartWindow() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        btnRunOcr = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        btnChooseFile = new javax.swing.JButton();
        tbInputFilePath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tbTessdataInput = new javax.swing.JTextField();

        jScrollPane1.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sinhala OCR");

        btnRunOcr.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnRunOcr.setText("Run OCR");
        btnRunOcr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunOcrActionPerformed(evt);
            }
        });

        jEditorPane2.setOpaque(false);
        jScrollPane2.setViewportView(jEditorPane2);

        btnChooseFile.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnChooseFile.setText("Choose File");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Selected File : ");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Training Data");

        tbTessdataInput.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        tbTessdataInput.setText("sin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(277, 277, 277))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbInputFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChooseFile)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tbTessdataInput, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRunOcr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 15, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tbTessdataInput, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(btnRunOcr))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tbInputFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnChooseFile)))
                        .addGap(35, 35, 35)))
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * method to render tiff ocrInputImage*
     */
    private static Image loadImage(byte[] data) throws Exception {

        SeekableStream stream = new ByteArraySeekableStream(data);
        String[] names = ImageCodec.getDecoderNames(stream);
        ImageDecoder dec
                = ImageCodec.createImageDecoder(names[0], stream, null);
        RenderedImage im = dec.decodeAsRenderedImage();
        Image ocrInputImage = PlanarImage.wrapRenderedImage(im).getAsBufferedImage();
        return ocrInputImage;
    }

    private String inputFilePath;
    private String absolutePathWithFileName;
    private String inputImageFileName;


    private void btnRunOcrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunOcrActionPerformed

        absolutePathWithFileName = tbInputFilePath.getText();
        OutputPreviewWindow outputPreviewWindow = new OutputPreviewWindow();
        try {
            log.info("The name of the file selected for OCR : " + absolutePathWithFileName);
            String tessdataLanguages=tbTessdataInput.getText();
            // Run OCR for the selected file
            OcrActions ocrInstance = new OcrActions();

            String hocrOutput = ocrInstance.performOcr(absolutePathWithFileName,tessdataLanguages); //GET HOCR output
            String textOutput = ocrInstance.returnTextOutput(absolutePathWithFileName); // GET text output
            StringBuilder finalTextOutput = new StringBuilder();
            StringBuffer sbLine = new StringBuffer();
            String[] lines = textOutput.split("\\n");

            for (String line : lines) {
                sbLine = sbLine.delete(0, finalTextOutput.length());
                if (!"".equals(line)) {
                    for (String word : line.split(" ")) {
                        word = ocrInstance.applyVowelNormalizationRules(word);
                        word = ocrInstance.applyConsonantNormalizationRules(word);
                        word = ocrInstance.applySpecialConsonantRules(word);
                        sbLine.append(word);
                        sbLine.append(" ");

                    }
                }
                finalTextOutput.append(sbLine); // appends line to string buffer
                finalTextOutput.append("\r\n"); // line feed
            }

            long currentTime = System.currentTimeMillis();

            try (OutputStreamWriter htmlDocWriter = new OutputStreamWriter(new FileOutputStream(inputFilePath + "\\" + currentTime + ".html"), StandardCharsets.UTF_8)) {
                htmlDocWriter.write(hocrOutput);
            }

            try (OutputStreamWriter textDocWriter = new OutputStreamWriter(new FileOutputStream(inputFilePath + "\\" + currentTime + ".txt"), StandardCharsets.UTF_8)) {
                textDocWriter.write(finalTextOutput.toString());
            }


            outputPreviewWindow.loadFile(hocrOutput, textOutput, String.valueOf(currentTime) + ".html", String.valueOf(currentTime) + ".txt", inputFilePath);
            outputPreviewWindow.setExtendedState(outputPreviewWindow.getExtendedState());
            outputPreviewWindow.setLocationRelativeTo(null);
            outputPreviewWindow.setResizable(Boolean.FALSE);
            outputPreviewWindow.pack();
            outputPreviewWindow.setVisible(true);

        } catch (IOException ex) {
            log.error(ex.getMessage(), ex);
        }

    }//GEN-LAST:event_btnRunOcrActionPerformed

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed

        JFileChooser choose = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TIF Images", "tif");
        choose.setFileFilter(filter);
        int returnVal;
        returnVal = choose.showOpenDialog(choose);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            log.info("You chose to open this file: "
                    + choose.getSelectedFile().getAbsolutePath());
        }

        // set variable values for file path and input directory
        inputFilePath = choose.getCurrentDirectory().getAbsolutePath();
        inputImageFileName = choose.getSelectedFile().getName();

        StringBuilder file = new StringBuilder(inputFilePath);

        for (int p = file.length() - 1; p >= 0; p--) {
            if (file.charAt(p) == '\\') {
                file.insert(p, '\\');
            }
        }
        file.insert((file.length()), '\\');
        file.insert((file.length()), '\\');
        inputFilePath = file.toString();

        absolutePathWithFileName = inputFilePath + inputImageFileName;
        tbInputFilePath.setText(absolutePathWithFileName);

        try {
            FileInputStream in = new FileInputStream(absolutePathWithFileName);
            FileChannel channel = in.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate((int) channel.size());
            channel.read(buffer);
            Image image = loadImage(buffer.array());

            Image imageScaled
                    = image.getScaledInstance(800, -1, Image.SCALE_SMOOTH);

            jLabel1.setLayout(new BorderLayout());
            jLabel1.setIcon(new javax.swing.ImageIcon(imageScaled));
        } catch (FileNotFoundException e) {
            log.error(e.getMessage(), e);
        } catch (IOException e) {
            log.error(e.getMessage(), e);
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

    }//GEN-LAST:event_btnChooseFileActionPerformed

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(StartWindow.class);

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        String log4jConfPath = "log4j.properties";
        PropertyConfigurator.configure(log4jConfPath);
        log.info("*************************************Starting Program Execution  *************************************");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StartWindow newStartWindow = new StartWindow();
                newStartWindow.setLocationRelativeTo(null);
                newStartWindow.setExtendedState(JFrame.MAXIMIZED_BOTH);
                newStartWindow.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnRunOcr;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField tbInputFilePath;
    private javax.swing.JTextField tbTessdataInput;
    // End of variables declaration//GEN-END:variables
}
